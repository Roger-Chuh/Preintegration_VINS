function CovMatrixInv = fnCalcCovMatrixInv( SLAM_Params, Zobs, Rd )

    global InertialDelta_options
    
    nUV = length(Zobs.fObs) * 2;
    CovInv_FObs_obj = struct( ...
        'val',  1 / (SLAM_Params.sigma_uov_cov * SLAM_Params.sigma_uov_cov ) * eye(nUV) ...            
        );        

    nPoseNew = length( Zobs.intlDelta ) + 1;
    CovInv_IntlDelta_obj = struct( ...
        'val', eye( (nPoseNew - 1) * 3 * 3 ) ...
        );
    
    for pid = 2:nPoseNew
        %covInv = 1e0 * inv( Rd{pid}(1:9,1:9) ); %2e0 1e0-1 -2 -4  
        %CovMatrixInv( (nUV+9*(pid-2)+1):(nUV+9*(pid-1)), (nUV+9*(pid-2)+1):(nUV+9*(pid-1)) ) = covInv;
        CovInv_IntlDelta_obj.val( 9 * ( pid - 2) + 1: 9 * (pid - 1), 9 * ( pid - 2) + 1: 9 * (pid - 1) ) = ...
                                        1e0 * inv( Rd{pid}( 1:9, 1:9 ) );
    end

    CovInv_Au2c_obj = struct( ...
        'val', 1 / (SLAM_Params.sigma_au2c_cov * SLAM_Params.sigma_au2c_cov ) * eye( 3 ) ...
        );

    CovInv_Tu2c_obj = struct( ...
        'val', 1 / (SLAM_Params.sigma_tu2c_cov * SLAM_Params.sigma_tu2c_cov ) * eye( 3 ) ...
        );

    if ( InertialDelta_options.bVarBias == 0 )

        CovInv_Bf_obj = struct( ...
            'val', 1 / (SLAM_Params.sigma_bf_cov * SLAM_Params.sigma_bf_cov ) * eye( 3 ) ...
            );

        CovInv_Bw_obj = struct( ...
            'val', 1 / (SLAM_Params.sigma_bw_cov * SLAM_Params.sigma_bw_cov ) * eye( 3 ) ...
            );

    else

        CovInv_Bf_obj = struct( ...
            'val', eye( (nPoseNew - 2) * 3 ) ...
            );

        CovInv_Bw_obj = struct( ...
            'val', eye( (nPoseNew - 2) * 3 ) ...
            );            
        for( pid= 2 : ( nPoseNew - 1 ) )
            %tv = eye(6);
            %tv(1:3, 1:3) = (1/sigma_bf_cov)^2 * tv(1:3, 1:3);%(bfi-bfi1)
            %tv(4:6, 4:6) = (1/(dtIMU(pid)*sigma_bw_cov))^2 * tv(4:6, 4:6);
            %CovMatrixInv((utid+1):(utid+6), (utid+1):(utid+6)) = tv;%1e8
            %utid = utid + 6; 
            CovInv_Bf_obj.val( (pid-2)*3 + 1: (pid-1)*3, (pid-2)*3 + 1: (pid-1)*3 ) = (1/SLAM_Params.sigma_bf_cov)^2 * eye( 3 );
            CovInv_Bw_obj.val( (pid-2)*3 + 1: (pid-1)*3, (pid-2)*3 + 1: (pid-1)*3 ) = (1 / ( dtIMU(pid) * sigma_bw_cov )) ^ 2 * eye( 3 );                
        end

    end

    CovInv_obj = struct( ...
        'fObs',         CovInv_FObs_obj, ...
        'intlDelta',    CovInv_IntlDelta_obj, ...
        'Au2c',         CovInv_Au2c_obj, ...
        'Tu2c',         CovInv_Tu2c_obj, ...
        'Bf',           CovInv_Bf_obj, ...
        'Bw',           CovInv_Bw_obj ...
        );

    nRow = Zobs.Bw.row( end );

    CovMatrixInv = Cov_Object2Matrix( CovInv_obj, nRow );

    return;
        

    
