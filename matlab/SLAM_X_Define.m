function X_Def = InertialDelta_X_Define( nPts, nPoseNew, nIMUdata )

    global InertialDelta_options
    
    Angle_Def = struct( ...
        'val', zeros(3, 1), ...
        'col', [] ...
        );

    Trans_Def = struct( ...
        'val', zeros(3, 1), ...
        'col', [] ...
        );

    Pose_Def = struct( ...
        'ang',      Angle_Def, ...
        'trans',    Trans_Def ...
        );

    Feature_Def = struct( ...
        'xyz',      zeros(3, 1), ...
        'col',      [] ...
        );

    Velocity_Def = struct ( ...
        'xyz',      zeros(3, 1), ...
        'col',      [] ...
        );
    
    G_Def =  struct( ...
        'val', zeros(3, 1), ...
        'col', [] ...
        );

    if InertialDelta_options.bVarBias == 0
        Bf_Def = struct( ...
            'val', zeros(3, 1), ...
            'col', [] ...
            );

        Bw_Def = struct( ...
            'val', zeros(3, 1), ...
            'col', [] ...
            );
    else
        Bf1_Def = struct( ...
            'val', zeros(3, 1), ...
            'col', [] ...
            );

        Bw1_Def = struct( ...
            'val', zeros(3, 1), ...
            'col', [] ...
            );
        
        Bf_Def = struct( ...
            'iter', repmat( Bf1_Def, nPoseNew-1, 1 ) ...
            );
        
        Bw_Def = struct( ...
            'iter', repmat( Bw1_Def, nPoseNew-1, 1 ) ...
            );
    end

    X_Def = struct( ...
        'pose',     repmat( Pose_Def, nPoseNew - 1, 1 ) , ...
        'feature',  repmat( Feature_Def, nPts, 1 ), ...
        'velocity', repmat( Velocity_Def, nPoseNew, 1), ...
        'g',        G_Def, ...
        'Au2c',     Angle_Def, ...
        'Tu2c',     Trans_Def, ...
        'Bf',       Bf_Def, ...
        'Bw',       Bw_Def ...
        );
    
