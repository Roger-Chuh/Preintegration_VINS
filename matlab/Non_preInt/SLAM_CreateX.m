function X_obj = InertialDelta_InitX( nPts, nPoseNew, nIMUdata )

    global InertialDelta_options
    
    Angle_Def = struct( ...
        'val', zeros(3, 1), ...
        'col', [] ...
        );

    Trans_Def = struct( ...
        'val', zeros(3, 1), ...
        'col', [] ...
        );

    Pose_Def = struct( ...
        'ang',      Angle_Def, ...
        'trans',    Trans_Def ...
        );

    Feature_Def = struct( ...
        'xyz',      zeros(3, 1), ...
        'col',      [] ...
        );

    Velocity_Def = struct ( ...
        'xyz',      zeros(3, 1), ...
        'col',      [] ...
        );
    
    G_Def =  struct( ...
        'val', zeros(3, 1), ...
        'col', [] ...
        );
    
    Bf_Def = struct( ...
        'val', zeros(3, 1), ...
        'col', [] ...
        );

    Bw_Def = struct( ...
        'val', zeros(3, 1), ...
        'col', [] ...
        );
        
    if(InertialDelta_options.bUVonly == 1)
        %x = zeros(6*(nPoseNew-1)+3*nPts+3*2,1);
            X_Def = struct( ...
                'pose',     repmat( Pose_Def, nIMUdata) , ...
                'feature',  repmat( Feature_Def, nPts ), ...
                'Au2c',     Angle_Def, ...
                'Tu2c',     Trans_Def ...
                );
    else
        if(InertialDelta_options.bPreInt == 0)
            %x = zeros((nIMUdata)*6+nPts*3+3*(nIMUdata+1)+15+6,1);%???(nPoses-1)*nIMUrate (nPoses-1)*nIMUrate+1 one additional 6 for convenience
            X_Def = struct( ...
                'pose',     repmat( Pose_Def, nIMUdata) , ...
                'feature',  repmat( Feature_Def, nPts ), ...
                'velocity', repmat( Velocity_Def, nIMUdata+1, 1), ...
                'g',        G_Def, ...
                'Au2c',     Angle_Def, ...
                'Tu2c',     Trans_Def, ...
                'Bf',       Bf_Def, ...
                'Wf',       Bw_Def ...
                );
        else
            %x = zeros((nPoseNew-1)*6+nPts*3+3*nPoseNew+3+6+6, 1); 

            X_Def = struct( ...
                'pose',     repmat( Pose_Def, nPoseNew - 1, 1 ) , ...
                'feature',  repmat( Feature_Def, nPts, 1 ), ...
                'velocity', repmat( Velocity_Def, nPoseNew, 1), ...
                'g',        G_Def, ...
                'Au2c',     Angle_Def, ...
                'Tu2c',     Trans_Def, ...
                'Bf',       Bf_Def, ...
                'Bw',       Bw_Def ...
                );
        end
    end   
    
    X_obj = X_Def;
