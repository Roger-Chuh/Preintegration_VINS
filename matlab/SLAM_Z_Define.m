function Z_Def = SLAM_Z_Define( nFrames, nPts, nIMUrate, varargin )
    %global PreIntegration_options
    global PreIntegration_options

    if ( length( varargin ) > 0 )
        nUVs = varargin{1};
    else
        nUVs = nPts * nFrames;
    end
            
    if 0
            if(PreIntegration_options.bPreInt == 0) %    two key frames: (wi,ai,dTi)
            Zobs = zeros(idr+(nFrames-1)*nlenpp, 1);
        else
            Zobs = zeros(idr+(nFrames-1)*9, 1); % Number of observations for pre-integration: (ui,vi) + (dpi,dvi,dphii) 
        end
    end
    
    UV_Def = struct( ...
        'uv',   zeros( 2, 1 ), ...
        'row', [] ...
        );

    
    if(PreIntegration_options.bPreInt == 1) 
    
        DeltaP_Def = struct( ...
            'val', zeros( 3, 1 ), ...
            'row', [] ...
            );
        
        DeltaV_Def = struct( ...
            'val', zeros( 3, 1 ), ...
            'row', [] ...
            );
        
        DeltaPhi_Def = struct( ...
            'val', zeros( 3, 1 ), ...
            'row', [] ...
            );
        
        IntlDelta_Def = struct ( ...
            'deltaP',   DeltaP_Def, ...
            'deltaV',   DeltaV_Def, ...
            'deltaPhi', DeltaPhi_Def ...
            );

    else
        Acceleration_Def = struct( ...
            'val', zeros( 3, 1 ), ...
            'row', [] ...
            );
        
        AngularRate_Def = struct( ...
            'val', zeros( 3, 1 ), ...
            'row', [] ...
            );
        
        DeltaTrans_Def = struct( ...
            'val', zeros( 3, 1 ), ...
            'row', [] ...
            );
            
        ImuObs_Def = struct ( ...
            'w',      AngularRate_Def, ...
            'acc',    Acceleration_Def, ...
            'deltaT', DeltaTrans_Def ...
            );
            
        FrameImuObs_Def = repmat( ImuObs_Def, nIMUrate, 1 );
    end
    
    Gravity_Def = struct( ...
        'val', zeros(3, 1), ...
        'row', [] ...
        );
    
    Angle_Def = struct( ...
        'val', zeros(3, 1), ...
        'row', [] ...
        );
    
    Trans_Def = struct( ...
        'val', zeros(3, 1), ...
        'row', [] ...
        );
    
    if PreIntegration_options.bVarBias == 0
        Bf_Def = struct( ...
            'val', zeros(3, 1), ...
            'row', [] ...
            );

        Bw_Def = struct( ...
            'val', zeros(3, 1), ...
            'row', [] ...
            );
    else
        Bf_1_Def = struct( ...
            'val', zeros(3*(nFrames-2), 1), ... %bfi-bfi1 = 0
            'row', [] ...
            );

        Bw_1_Def = struct( ...
            'val', zeros(3*(nFrames-2), 1), ... %bwi-bwi1 = 0
            'row', [] ...
            );
        
        Bf_Def = struct( ...
            'iter', repmat(Bf1_Def, (nFrames-2), 1) ... %bfi-bfi1 = 0
            );

        Bw_Def = struct( ...
            'iter', repmat(Bw1_Def, (nFrames-2), 1) ... %bwi-bwi1 = 0
            );
    end
    
    if(PreIntegration_options.bPreInt == 1) 
        Z_Def = struct( ...
            'fObs',         repmat( UV_Def, nUVs, 1 ), ... % maybe redundant, will be cleaned
            'intlDelta',    repmat( IntlDelta_Def, nFrames-1, 1 ), ...
            'Au2c',         Angle_Def, ...
            'Tu2c',         Trans_Def, ...
            'Bf',           Bf_Def, ...
            'Bw',           Bw_Def ...
            );
    else
        nImuObs = (nFrames - 1) * nIMUrate;
        Z_Def = struct( ...
            'fObs',         repmat( UV_Def, nUVs, 1 ), ... % maybe redundant, will be cleaned
            'imu',          repmat( ImuObs_Def, nImuObs, 1 ), ...
            'Au2c',         Angle_Def, ...
            'Tu2c',         Trans_Def, ...
            'Bf',           Bf_Def, ...
            'Bw',           Bw_Def ...
            );
    end
    
    if ( PreIntegration_options.bAddZg == 1 )
        Z_Def.g = Gravity_Def;
    end